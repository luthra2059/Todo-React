{"version":3,"sources":["components/TodoItem.js","components/Todo.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","style","this","type","checked","onChange","markComplete","bind","id","title","onClick","delTodo","btnStyle","Component","color","border","borderRadius","cursor","float","Todo","map","key","Header","headerStyle","linkStyle","to","textAlign","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","flex","placeholder","className","About","Fragment","App","axios","delete","then","res","filter","post","data","v4","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.74afbbef.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport default class TodoItem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            background:'#f4f4f4',\r\n            padding:'10px',\r\n            borderBottom: '1pc #ccc dotted',\r\n            textDecoration: this.props.todo.completed? 'line-through':'none'\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <h5>\r\n                <input type='checkbox' checked={this.props.todo.completed?true:false} onChange={this.props.markComplete.bind(this, this.props.todo.id)}/>{' '}\r\n                {this.props.todo.title}<button onClick={this.props.delTodo.bind(this, this.props.todo.id)}  style={btnStyle}>X</button></h5>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 9px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport TodoItem from './TodoItem'\r\nimport PropTypes from 'prop-types'\r\nexport default class Todo extends Component {\r\n    \r\n    render() {\r\n        return this.props.todo.map((todo)=>(\r\n            <TodoItem delTodo={this.props.delTodo} key={todo.id} todo={todo} markComplete={this.props.markComplete}/>\r\n        )) \r\n    }\r\n}\r\nTodo.propTypes = {\r\n    todo: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nexport default function Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>Todo List</h1>\r\n            <Link style={linkStyle} to = \"/\" >Home</Link> | &nbsp;\r\n            <Link style={linkStyle} to =\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\nconst linkStyle = {\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport default class AddTodo extends Component {\r\n    state = {\r\n        title: ''\r\n    }\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title: ''});\r\n    }\r\n    render(){\r\n    return (\r\n        <form onSubmit={this.onSubmit} style={{display:'flex'}}>\r\n            <input \r\n            onChange={this.onChange} \r\n            type='text' \r\n            name='title' value={this.state.title} style={{flex:'10', padding:'5px'}} placeholder='Add Todo...'/>\r\n            <input type='submit' value='Submit' className=\"btn\" style={{flex:'1'}}/>\r\n        </form>\r\n    )\r\n    }\r\n}\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired,\r\n}","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is the Todo List app v1.0.0. It is a part of Shubham Luthra's github projects</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import \"./App.css\";\nimport Todo from \"./components/Todo\";\nimport Header from \"./components/layout/Header\";\nimport React, { Component } from \"react\";\nimport AddTodo from \"./components/AddTodo\";\nimport { v4 } from \"uuid\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport About from \"./components/pages/About\";\nimport axios from \"axios\";\nexport default class App extends Component {\n  state = {\n    todo: [],\n  };\n  componentDidMount() {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\n      .then((res) => this.setState({ todo: res.data }));\n  }\n  markComplete = (id) => {\n    this.setState({\n      todo: this.state.todo.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      }),\n    });\n  };\n  delTodo = (id) => {\n    axios\n      .delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then((res) =>\n        this.setState({\n          todo: [...this.state.todo.filter((todo) => todo.id !== id)],\n        })\n      );\n  };\n  addTodo = (title) => {\n    axios\n      .post(\"https://jsonplaceholder.typicode.com/todos\", {\n        title,\n        completed: false,\n      })\n      .then((res) => {\n        res.data.id = v4();\n        this.setState({ todo: [...this.state.todo, res.data] });\n      });\n  };\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container-fluid\">\n            <Header />\n            <Route\n              exact\n              path=\"/\"\n              render={(props) => (\n                <React.Fragment>\n                  <AddTodo addTodo={this.addTodo} />\n                  <Todo\n                    delTodo={this.delTodo}\n                    todo={this.state.todo}\n                    markComplete={this.markComplete}\n                  />\n                </React.Fragment>\n              )}\n            />\n            <Route exact path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}